/**

Implement a `map` method on this Tree class
Does NOT modify original tree

Implement `mapInPlace`, which DOES modify
the original tree instead of generating a new one.

*/

let Tree = function(value) {
  this.value = value;
  this.children = [];
};

Tree.prototype.map = function (callback) {
  // return a new tree with the same structure as `this`, with values generated by the callback
  let mappedTree = new Tree(callback(this.value));

  mappedTree.children = this.children.map(child => {
    return child.map(callback);
  });

  return mappedTree;
};


Tree.prototype.mapInPlace = function (callback) {
  this.value = callback(this.value);

  //update the values of the existing tree with values generated by the callback
  this.children.forEach(child => {
    child.mapInPlace(callback);
  });
};

/* Helper Methods */

Tree.prototype.addChild = function(child) {
  if (!child || !(child instanceof Tree)) {
    child = new Tree(child);
  }

  if (!this.isDescendant(child)) {
    this.children.push(child);
  } else {
    throw new Error('That child is already a child of this tree');
  }
  // return the new child node for convenience
  return child;
};

Tree.prototype.isDescendant = function(child) {
  if (this.children.indexOf(child) !== -1) {
    // `child` is an immediate child of this tree
    return true;
  } else {
    for (var i = 0; i < this.children.length; i++) {
      if (this.children[i].isDescendant(child)) {
        // `child` is descendant of this tree
        return true;
      }
    }
    return false;
  }
};

Tree.prototype.removeChild = function(child) {
  var index = this.children.indexOf(child);
  if (index !== -1) {
    // remove the child
    this.children.splice(index, 1);
  } else {
    throw new Error('That node is not an immediate child of this tree');
  }
};
